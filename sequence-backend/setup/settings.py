"""
Django settings for setup project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import logging
from logging.config import dictConfig

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-zqypip^r_0qe(j13^j91j=5p6o(ngd6a)$e==^0&mkt%!t(hzh"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['0.0.0.0', '172.20.10.2', '192.168.1.162', '127.0.0.1']

# Disable the default logging configuration
LOGGING_CONFIG = None

# Define your custom logging configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": "/Users/kevlarn/GMU/Coursework/sequence/server_logs.log",
            "level": "INFO",
        },
    },
    "loggers": {
        "root": {
            "handlers": ["console", "file"],
            'level': 'DEBUG',
        },
        "django": {
            "handlers": ["console"],
            "level": "INFO",
        },
    },
    "formatters": {
        "standard": {
            "format" : '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        },
        'default': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
        },
        'debug': {
            'format': '%(asctime)s [%(levelname)s] %(name)s (DEBUG): %(message)s',
        },
        'warning': {
            'format': '%(asctime)s [%(levelname)s] %(name)s (WARNING): %(message)s',
        },
        'error': {
            'format': '%(asctime)s [%(levelname)s] %(name)s (ERROR): %(message)s',
        }
    }
}

# Assign specific formatters to handlers based on log levels
LOGGING['handlers']['console']['formatter'] = 'default'
LOGGING['loggers']['django']['handlers'] = ['console']
LOGGING['loggers']['django']['level'] = 'DEBUG'

# Assign specific formatters to handlers for warning and error logs
LOGGING['handlers']['console_warning'] = {
    'class': 'logging.StreamHandler',
    'formatter': 'warning',
}
LOGGING['loggers']['django']['handlers'].append('console_warning')

LOGGING['handlers']['console_error'] = {
    'class': 'logging.StreamHandler',
    'formatter': 'error',
}
LOGGING['loggers']['django']['handlers'].append('console_error')

# Configure the root logger
dictConfig(LOGGING)

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'rest_framework',
    'pymongo',
    'channels',
    "django_extensions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'corsheaders.middleware.CorsMiddleware'
]

ROOT_URLCONF = "setup.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "setup.wsgi.application"

ASGI_APPLICATION = 'setup.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('localhost', 6379)],
        },
    },
}



# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CORS_ALLOWED_ORIGINS = [
    ''
    'http://localhost:3000',
    'http://192.168.1.162:3000',
    'http://172.20.10.2:3000',
    'http://172.20.10.2:8000',
    'http://192.168.1.162:8000'  # Add the URL of your frontend app here
    # Add more allowed origins if needed
]